[{"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/index.js":"1","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/App.js":"2","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/pages/SearchBooks.js":"3","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/pages/SavedBooks.js":"4","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/components/Navbar.js":"5","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/components/SignupForm.js":"6","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/components/LoginForm.js":"7","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/auth.js":"8","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/queries.js":"9","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/API.js":"10","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/mutation.js":"11","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/localStorage.js":"12"},{"size":266,"mtime":1638428964425,"results":"13","hashOfConfig":"14"},{"size":1601,"mtime":1638428964421,"results":"15","hashOfConfig":"14"},{"size":4877,"mtime":1638428964426,"results":"16","hashOfConfig":"14"},{"size":2380,"mtime":1638428964425,"results":"17","hashOfConfig":"14"},{"size":2524,"mtime":1638428964423,"results":"18","hashOfConfig":"14"},{"size":3548,"mtime":1638428964424,"results":"19","hashOfConfig":"14"},{"size":2989,"mtime":1638428964422,"results":"20","hashOfConfig":"14"},{"size":1234,"mtime":1638428964427,"results":"21","hashOfConfig":"14"},{"size":260,"mtime":1638428964428,"results":"22","hashOfConfig":"14"},{"size":280,"mtime":1638428964427,"results":"23","hashOfConfig":"14"},{"size":869,"mtime":1638428964428,"results":"24","hashOfConfig":"14"},{"size":793,"mtime":1638428964427,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x5913p",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/index.js",[],"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/App.js",[],"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/pages/SearchBooks.js",[],"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/pages/SavedBooks.js",["53","54","55"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\n// import { getMe, deleteBook } from '../utils/API';\nimport { QUERY_GETME} from '../utils/queries';\nimport {DELETE_BOOK} from '../utils/mutation'\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  \n  const [deleteBook] = useMutation(DELETE_BOOK);\n  \n  let { loading, data } = useQuery(QUERY_GETME);\n  const userData =  data?.getMe || {};\n  console.log(userData)\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook =  async(bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook({\n        variables: {bookId}\n      });\n\n      window.location.reload();\n      \n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n \n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        {console.log (userData)}\n        <h2>\n          {!loading\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n        {!loading\n            ? userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            ); \n           \n        } ) : \"\"} \n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/components/Navbar.js",[],"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/components/SignupForm.js",["56","57"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n// import { createUser } from '../utils/API';\nimport {CREATE_USER} from '../utils/mutation'\nimport Auth from '../utils/auth';\n\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [createUser, {error, data}] = useMutation(CREATE_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    // const form = event.currentTarget;\n    // if (form.checkValidity() === false) {\n    //   event.preventDefault();\n    //   event.stopPropagation();\n    // }\n\n    try {\n      const {data} = await createUser({\n        variables: {...userFormData},\n        });\n      \n      Auth.login(data.createUser.token)\n      \n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // const { token, user } = await response.json();\n      // console.log(user);\n      // Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/components/LoginForm.js",["58"],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\n// import { loginUser } from '../utils/API';\nimport {LOGIN_USER} from '../utils/mutation'\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(userFormData);\n\n    // check if form has everything (as per react-bootstrap docs)\n    // const form = event.currentTarget;\n    // if (form.checkValidity() === false) {\n    //   event.preventDefault();\n    //   event.stopPropagation();\n    // }\n\n    try {\n      const {data} = await loginUser({\n        variables: {...userFormData},\n      });\n      console.log(data.loginUser.token)\n      Auth.login(data.loginUser.token)\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // const { token, user } = await response.json();\n      // console.log(user);\n      // Auth.login(token);\n    } catch (error) {\n      console.error(error);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        \n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/auth.js",[],"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/queries.js",[],"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/API.js",[],"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/mutation.js",[],"/Users/satish.iyer/code/homework/BookSearch/BookSearch/Develop/client/src/utils/localStorage.js",[],{"ruleId":"59","severity":1,"message":"60","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":25},{"ruleId":"59","severity":1,"message":"63","line":1,"column":27,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"59","severity":1,"message":"64","line":27,"column":13,"nodeType":"61","messageId":"62","endLine":27,"endColumn":21},{"ruleId":"59","severity":1,"message":"65","line":16,"column":23,"nodeType":"61","messageId":"62","endLine":16,"endColumn":28},{"ruleId":"59","severity":1,"message":"66","line":16,"column":30,"nodeType":"61","messageId":"62","endLine":16,"endColumn":34},{"ruleId":"59","severity":1,"message":"67","line":5,"column":10,"nodeType":"61","messageId":"62","endLine":5,"endColumn":14},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'response' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'Link' is defined but never used."]